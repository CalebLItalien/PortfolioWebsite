The website you are currently viewing can be generated by anyone, with no coding experience required. The goal of the project is to help people applying for software-related jobs, who need a personal website to display their skills and experience without wanting to dive into web development. The project utilizes TypeScript, React, Rust, Docker, and AWS. A user can simply run a bash script to set up the project, make edits, and prepare a Docker image for deployment. Further, I have designed the SMTP server to work with a user’s no-reply email and personal email (for the contact card).
I am currently leading a team of 6 to redesign Union College’s Compiler Design course by developing an instructional C compiler. The compiler is written in Rust and Python, with the backend binding to LLVM’s C API for architecture independent binary code generation. Further, the backend kernel features automatic memory management of raw C pointers in safe Rust code.
My primary role in this project was to maintain and automate the processing of Cherokee text for integration into the existing learning platform. By utilizing Python with static typing, my work solved unique challenges posed by the Cherokee syllabary, significantly improving the efficiency of data extraction.
For a class on Operating Systems, I worked in a team of three to develop an operating system. We began by implementing data structures and synchronization primitives. These tools helped build the basis for system calls, memory management, and process scheduling/management. While we all worked together on the project, I was primarily responsible for the process to thread mapping, process management, and the following system calls: fork(), waitpid(), getpid(), and exit().
For a class on Programming Languages, I developed a small but comprehensive programming language and environment in Lisp. The language includes mutable and immutable data structures, references, and automatic garbage collection in a runtime environment.
For a class on Artificial Intelligence, I implemented six different path finding algorithms on the popular game 2048. I wrote the algorithms in Python and Rust, compared performance metrics, and reported on the efficiency of the various algorithms in finding the optimal path.
